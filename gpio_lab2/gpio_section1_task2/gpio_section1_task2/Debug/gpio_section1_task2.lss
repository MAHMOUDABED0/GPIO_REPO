
gpio_section1_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000054b  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004fd  00000000  00000000  0000070f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000299  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  000010fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001195  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
/*
	for(i=5;i<8;i++){
		setbit(DDRD,i);
	}
*/
DDRD|=(0b1111<<4);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6f       	ori	r24, 0xF0	; 240
  70:	81 bb       	out	0x11, r24	; 17
	
    while (1) 
    {
		if(redbit(DDRD,0)==0){
  72:	88 99       	sbic	0x11, 0	; 17
  74:	10 c0       	rjmp	.+32     	; 0x96 <main+0x2a>
			setbit(PORTD,5);
  76:	82 b3       	in	r24, 0x12	; 18
  78:	80 62       	ori	r24, 0x20	; 32
  7a:	82 bb       	out	0x12, r24	; 18
			for(i=200;i>0;i--);
  7c:	88 ec       	ldi	r24, 0xC8	; 200
  7e:	01 c0       	rjmp	.+2      	; 0x82 <main+0x16>
  80:	81 50       	subi	r24, 0x01	; 1
  82:	81 11       	cpse	r24, r1
  84:	fd cf       	rjmp	.-6      	; 0x80 <main+0x14>

			clearbit(PORTD,5);
  86:	82 b3       	in	r24, 0x12	; 18
  88:	8f 7d       	andi	r24, 0xDF	; 223
  8a:	82 bb       	out	0x12, r24	; 18
			for(i=200;i>0;i--);
  8c:	88 ec       	ldi	r24, 0xC8	; 200
  8e:	01 c0       	rjmp	.+2      	; 0x92 <main+0x26>
  90:	81 50       	subi	r24, 0x01	; 1
  92:	81 11       	cpse	r24, r1
  94:	fd cf       	rjmp	.-6      	; 0x90 <main+0x24>

    }
	
	if(redbit(DDRD,1)==0){
  96:	89 99       	sbic	0x11, 1	; 17
  98:	10 c0       	rjmp	.+32     	; 0xba <main+0x4e>
		setbit(PORTD,6);
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	82 bb       	out	0x12, r24	; 18
		for(i=200;i>0;i--);
  a0:	88 ec       	ldi	r24, 0xC8	; 200
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <main+0x3a>
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	81 11       	cpse	r24, r1
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <main+0x38>

		clearbit(PORTD,6);
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	8f 7b       	andi	r24, 0xBF	; 191
  ae:	82 bb       	out	0x12, r24	; 18
		for(i=200;i>0;i--);
  b0:	88 ec       	ldi	r24, 0xC8	; 200
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x4a>
  b4:	81 50       	subi	r24, 0x01	; 1
  b6:	81 11       	cpse	r24, r1
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0x48>

	}
	
	if(redbit(DDRD,2)==0){
  ba:	8a 99       	sbic	0x11, 2	; 17
  bc:	da cf       	rjmp	.-76     	; 0x72 <main+0x6>
		setbit(PORTD,7);
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	82 bb       	out	0x12, r24	; 18
		for(i=200;i>0;i--);
  c4:	88 ec       	ldi	r24, 0xC8	; 200
  c6:	01 c0       	rjmp	.+2      	; 0xca <main+0x5e>
  c8:	81 50       	subi	r24, 0x01	; 1
  ca:	81 11       	cpse	r24, r1
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <main+0x5c>

		clearbit(PORTD,7);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	8f 77       	andi	r24, 0x7F	; 127
  d2:	82 bb       	out	0x12, r24	; 18
		for(i=200;i>0;i--);
  d4:	88 ec       	ldi	r24, 0xC8	; 200
  d6:	01 c0       	rjmp	.+2      	; 0xda <main+0x6e>
  d8:	81 50       	subi	r24, 0x01	; 1
  da:	81 11       	cpse	r24, r1
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <main+0x6c>
  de:	c9 cf       	rjmp	.-110    	; 0x72 <main+0x6>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
