
gpio_section1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000573  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004fb  00000000  00000000  0000070f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ad  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c0  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	unsigned char flag=0;
	DDRA=0b00001101;
  6c:	8d e0       	ldi	r24, 0x0D	; 13
  6e:	8a bb       	out	0x1a, r24	; 26
	clearbit(DDRC,0);
  70:	84 b3       	in	r24, 0x14	; 20
  72:	8e 7f       	andi	r24, 0xFE	; 254
  74:	84 bb       	out	0x14, r24	; 20
	setbit(PORTC,0);
  76:	85 b3       	in	r24, 0x15	; 21
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	85 bb       	out	0x15, r24	; 21
#include <util/delay.h>


int main(void)
{
	unsigned char flag=0;
  7c:	80 e0       	ldi	r24, 0x00	; 0
	setbit(PORTC,0);
    /* Replace with your application code */
    while (1) 
    {
		
		if(redbit(PORTC,0)==1){
  7e:	a8 9b       	sbis	0x15, 0	; 21
  80:	17 c0       	rjmp	.+46     	; 0xb0 <main+0x44>
			
		switch(flag)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	51 f0       	breq	.+20     	; 0x9a <main+0x2e>
  86:	18 f0       	brcs	.+6      	; 0x8e <main+0x22>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	69 f0       	breq	.+26     	; 0xa6 <main+0x3a>
  8c:	11 c0       	rjmp	.+34     	; 0xb0 <main+0x44>
			{
			case 0:
			toggle(PORTA,0);
  8e:	2b b3       	in	r18, 0x1b	; 27
  90:	91 e0       	ldi	r25, 0x01	; 1
  92:	92 27       	eor	r25, r18
  94:	9b bb       	out	0x1b, r25	; 27
			flag++;
  96:	8f 5f       	subi	r24, 0xFF	; 255
			break;
  98:	0b c0       	rjmp	.+22     	; 0xb0 <main+0x44>
			case 1:
			toggle(PORTA,2);
  9a:	2b b3       	in	r18, 0x1b	; 27
  9c:	94 e0       	ldi	r25, 0x04	; 4
  9e:	92 27       	eor	r25, r18
  a0:	9b bb       	out	0x1b, r25	; 27
			flag++;
  a2:	8f 5f       	subi	r24, 0xFF	; 255
			break;
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <main+0x44>
			case 2:
			toggle(PORTA,3);
  a6:	9b b3       	in	r25, 0x1b	; 27
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	89 27       	eor	r24, r25
  ac:	8b bb       	out	0x1b, r24	; 27
			flag=0;
  ae:	80 e0       	ldi	r24, 0x00	; 0
			break;
    }
	
}
while(redbit(PORTC,0)==0);
  b0:	a8 9b       	sbis	0x15, 0	; 21
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x44>
  b4:	e4 cf       	rjmp	.-56     	; 0x7e <main+0x12>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
